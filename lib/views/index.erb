<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <%= erb :header %>
  <%= css '960.css' %>

  <script type="text/javascript">
  // $(function(){
  //     setupPreso(<%= slides.nil? ? "true" : "false"%>, './');
  // });

  var Class = function(parent) {
    var klass = function() {
      this.init.apply(this, arguments);
    };

    if (parent) {
      var subclass = function() {};
      subclass.prototype = parent.prototype;
      klass.prototype = new subclass;
    }

    klass.prototype.init = function() {};

    klass.extend = function(obj) {
      var extended = obj.extended;
      for (var i in obj) {
        klass[i] = obj[i];
      }
      if (extended) extended(klass)
    }

    klass.include = function(obj) {
      var included = obj.included;
      for (var i in obj) {
        klass.fn[i] = obj[i];
      }
      if (included) included(klass)
    }

    klass.proxy = function(func) {
      var self = this;
      return(function() {
        return func.apply(self,arguments);
      });
    }

    klass.fn = klass.prototype;
    klass.fn.parent = klass;
    klass._super = klass.__proto__;

    return klass;
  };
  </script>



</head>

<body>

<a tabindex="0" href="#search-engines" class="fg-button fg-button-icon-right ui-widget ui-state-default ui-corner-all" id="navmenu"><span class="ui-icon ui-icon-triangle-1-s"></span>slides</a>
<div id="navigation" class="hidden"></div>

<div id="help">
  <table>
    <tr><td class="key">z, ?</td><td>toggle help (this)</td></tr>
    <tr><td class="key">space, &rarr;</td><td>next slide</td></tr>
    <tr><td class="key">shift-space, &larr;</td><td>previous slide</td></tr>
    <tr><td class="key">d</td><td>toggle debug mode</td></tr>
    <tr><td class="key">## &lt;ret&gt;</td><td>go to slide #</td></tr>
    <tr><td class="key">c, t</td><td>table of contents (vi)</td></tr>
    <tr><td class="key">f</td><td>toggle footer</td></tr>
    <tr><td class="key">r</td><td>reload slides</td></tr>
    <tr><td class="key">n</td><td>toggle notes</td></tr>
    <tr><td class="key">p</td><td>run preshow</td></tr>
  </table>
</div>

<div class="buttonNav">
  <input class="prev" type="submit" value="prev"/>
  <input class="next" type="submit" value="next"/>
</div>

<div id="preso">loading presentation...</div>
<div id="footer">
  <span id="slideInfo"></span>
  <span id="debugInfo"></span>
  <span id="notesInfo"></span>
</div>

<div id="slides" class="offscreen" <%= 'style="display:none;"' if slides %>>
<%= slides %>
</div>
<div id="pauseScreen">
  <%= pause_message %>
</div>


<script type="text/javascript">
  var Presentation = new Class;

  Presentation.include({
    slidesFrame: $("#slides"),
    slides: $('#slides > .slide'),
    slidenum: 0,
    incrCurr: 0,
    increCode: false,
    currentSlide: function() {
      return $(this.slides.eq(this.slidenum));
    },
    presentationFrame: $("#preso"),

    navigationMenu: $("#navmenu"),

    loadSlides: function() {
      console.log("loadSlides");
      var presentation = this;
      console.log(this)
      $("#slides img").batchImageLoad({
        loadingCompleteCallback: presentation.initialize()
      });
      
      // This was being used for reload or coming out of preview mode
      
      // $("#slides").load("/slides",function() {
      //   console.log("loading slides complete");
      //   $("#slides img").batchImageLoad({
      //     loadingCompleteCallback: presentation.initialize()
      //   });
      // });

    },
    initialize: function() {
      console.log("Initializing Preso");

      this.slidesFrame.show();

      this.centerSlides();

      //copy into presentation area
      this.presentationFrame.empty();
      this.slides.appendTo(this.presentationFrame);


      this.slideTotal = this.slides.size();

      //setup manual jquery cycle
      this.presentationFrame.cycle({
        timeout: 0
      })

      this.setupMenu();
      if (this.slidesLoaded) {
        this.showSlide();
      } else {
        this.showFirstSlide();
        this.slidesLoaded = true
      }
      this.setupSlideParamsCheck();
      this.presentationFrame.trigger("showoff:loaded");

    },
    centerSlides: function() {
      console.log("Centering Slides");
      var presentation = this;
      this.slides.each(function(s,slide) {
        presentation.centerSlide(slide);
      });
    },
    centerSlide: function(slide) {
      var slideObject = $(slide);
      var slide_content = slideObject.children(".content").first();
      var height = slide_content.height();
      var margin_top = (0.5 * parseFloat(slideObject.height())) - (0.5 * parseFloat(height));
      if (margin_top < 0) {
        margin_top = 0;
      }
      slide_content.css('margin-top', margin_top);
    },
    setupMenu: function() {
      this.navigationMenu.hide();
      var currSlide = 0
      var menu = new ListMenu()

      this.slides.each(function(s, elem) {
        content = $(elem).children(".content")
        shortTxt = $(content).text().substr(0, 20)
        path = $(content).attr('ref').split('/')
        currSlide += 1
        menu.addItem(path, shortTxt, currSlide)
      })

      $('#navigation').html(menu.getList())
      this.navigationMenu.menu({
        content: $('#navigation').html(),
        flyOut: true,
        width: 200
      });
    },
    showFirstSlide: function() {
      this.slidenum = 0
      this.checkSlideParameter();
      this.showSlide()
    },
    gotoSlide: function(slideNum) {
     this.slidenum = parseInt(slideNum)
     if (!isNaN(this.slidenum)) {
       this.showSlide()
     }
    },
    checkSlideParameter: function() {
      if (slideParam = this.currentSlideFromParams()) {
        this.slidenum = slideParam;
      }
    },
    currentSlideFromParams: function() {
      var result;
      if (result = window.location.hash.match(/#([0-9]+)/)) {
        return result[result.length - 1] - 1;
      } else {
        return 0;
      }
    },
    getSlidePercent: function () {
      return Math.ceil(((this.slidenum + 1) / this.slideTotal) * 100)
    },
    determineIncremental: function() {
     this.incrCurr = 0;
     this.incrCode = false;
     this.incrElem = this.currentSlide().find(".incremental > ul > li");
     this.incrSteps = this.incrElem.size();
     if(this.incrSteps == 0) {
       // also look for commandline
       this.incrElem = this.currentSlide().find(".incremental pre pre");
       this.incrSteps = this.incrElem.size();
       this.incrCode = true;
     }
     this.incrElem.each(function(s, elem) {
       $(elem).css('visibility', 'hidden');
     });
    },
    getCurrentNotes: function() {
      var notes = this.currentSlide().find("p.notes").text();
      $('#notesInfo').text(notes);
      return notes;
    },

    showSlide: function(back_step) {

      if(this.slidenum < 0) {
        this.slidenum = 0
        return
      }

      if(this.slidenum > (this.slideTotal - 1)) {
        this.slidenum = this.slideTotal - 1
        return
      }

      var currentSlide = this.currentSlide();

      var transition = currentSlide.attr('data-transition');
      var fullPage = currentSlide.find(".content").is('.full-page');

      if (back_step || fullPage) {
        transition = 'none';
      }

      this.presentationFrame.cycle(this.slidenum, transition);

      if (fullPage) {
        this.presentationFrame.css({'width' : '100%', 'overflow' : 'visible'});
        currentSlide.css({'width' : '100%', 'text-align' : 'center', 'overflow' : 'visible'});
      } else {
        this.presentationFrame.css({'width' : '', 'overflow' : ''});
      }

      percent = this.getSlidePercent();
      $("#slideInfo").text((this.slidenum + 1) + '/' + this.slideTotal + '  - ' + percent + '%')

      if(!back_step) {
        // determine if there are incremental bullets to show
        // unless we are moving backward
        this.determineIncremental()
      } else {
        this.incrCurr = 0
        this.incrSteps = 0
      }
      location.hash = this.slidenum + 1;

      removeResults();

      var currentContent = currentSlide.find(".content");
      currentContent.trigger("showoff:show");

       var ret = this.getCurrentNotes();
       // If we have a presenterView attribute, that means this window was
       // opened by a presenter view, and we should poke it to make
       // it be on the same slide as us and show the correct notes.
             //
             // TODO: we do this in such a hacky way to avoid ever
             // assigning to the presenterView variable here. If we do
             // that, we can clobber the value sent in by the parent
             // presentation view and break the feature. Is there a better
             // way to do this?
       // if ('presenterView' in window) {
       //               var pv = window.presenterView;
       //   pv.slidenum = slidenum;
       //   pv.showSlide(true);
       //   pv.postSlide();
       // }
       return ret;
    },
    setupSlideParamsCheck: function() {
      var presentation = this;
      var check = function() {
        var currentSlide = presentation.currentSlideFromParams();
        if (presentation.slidenum != currentSlide) {
          presentation.slidenum = currentSlide;
          presentation.showSlide();
        }
        setTimeout(check, 100);
      }
      setTimeout(check, 100);
    },
    nextStep: function() {

      var event = jQuery.Event("showoff:next");

      this.currentSlide().find(".content").trigger(event);
      if (event.isDefaultPrevented()) {
        return;
      }

      if (this.incrCurr >= this.incrSteps) {
        this.slidenum++
        return this.showSlide();
      } else {
        this.showIncremental(this.incrCurr);
        var incrEvent = jQuery.Event("showoff:incr");
        incrEvent.slidenum = slidenum;
        incrEvent.incr = this.incrCurr;
        this.currentSlide().find(".content").trigger(incrEvent);
        this.incrCurr++;
      }
    },
    prevStep: function() {

     var event = jQuery.Event("showoff:prev");
     this.currentSlide().find(".content").trigger(event);
     if (event.isDefaultPrevented()) {
         return;
     }

     this.slidenum --;
     return this.showSlide(true) // We show the slide fully loaded
    },
    showIncremental: function(incr) {
       elem = this.incrElem.eq(this.incrCurr);
       if (this.incrCode && elem.hasClass('command')) {
         this.incrElem.eq(this.incrCurr).css('visibility', 'visible').jTypeWriter({duration:1.0});
       } else {
         this.incrElem.eq(this.incrCurr).css('visibility', 'visible');
       }
    }
    


  });

  var preso = new Presentation
  preso.loadSlides();

  doDebugStuff();

  // bind event handlers
  document.onkeydown = keyDown;
  document.onkeyup = keyUp;
  /* window.onresize  = resized; */
  /* window.onscroll = scrolled; */
  /* window.onunload = unloaded; */

  $('body').addSwipeEvents().
    bind('tap', swipeLeft).         // next
    bind('swipeleft', swipeLeft).   // next
    bind('swiperight', swipeRight); // prev

  $('buttonNav.prev').click(function(){
    preso.prevStep();
  });

  // temporary until the keyDown and keyUp are updated
  function nextStep() {
    preso.nextStep();
  }

  $('buttonNav.next').click(function(){
    preso.nextStep();
  });

  // temporary until the keyDown and keyUp are updated
  function prevStep() {
    preso.prevStep();
  }

</script>

</script>

</body>
</html>
